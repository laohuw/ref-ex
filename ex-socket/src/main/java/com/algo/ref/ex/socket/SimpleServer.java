/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.algo.ref.ex.socket;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Set;

public class SimpleServer {
    private int portNumber=8080;

    public void simpleServer() throws IOException {
        ServerSocket serverSocket=new ServerSocket(portNumber);
        serverSocket.setReuseAddress(true);
        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
        String line="";
        while (line !="bye") {
            Socket client = serverSocket.accept();
            System.out.println("income socket accepted from " + client.getInetAddress().getHostAddress());
            SocketThread socketThread = new SocketThread(client);
            socketThread.start();
//                processSocket(client);
            if(reader.ready())
                line=reader.readLine();
        }
//        serverSocket.close();
    }

    private void processSocket(Socket client) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
        PrintWriter out = new PrintWriter(client.getOutputStream(), true);
        String request, response;
        while ((request = in.readLine()) != null) {
            if ("Done".equals(request)) {
                System.out.println("income message: Done.");
                client.close();
                break;
            }
            response = request;
            System.out.println("income message: " + response);
            out.println(response);
//                    out.flush();
        }
    }

    public static void main(String[] args) throws IOException {
        new SimpleServer().simpleServer();

    }
}

class SocketThread extends Thread{
    private final Socket socket;
    public SocketThread(Socket socket){
        super();
        this.socket=socket;
    }

    public void run() {
        System.out.println("New socket thread created." + Thread.currentThread().getName());
        showThreadInfo();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
            String request, response;
            while (true) {
                if (!((request = in.readLine()) != null)) break;
                response = request;
                System.out.println("income message: " + response);
                out.println(response);
                if ("Done".equals(request)) {
                    System.out.println("income message: Done.");
                    if(socket!=null)
                        socket.close();
//                    break;
                }
//                out.flush();
            }
            if (out != null)
                out.close();
            if (in != null) {

                in.close();

            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }


    }

    private void showThreadInfo(){
        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
        for (Thread t : threadSet) {
            System.out.printf("%-15s \t %-15s \t %-15d \t %s\n", t.getName(), t.getState(), t.getPriority(), t.isDaemon());
        }

    }
}
